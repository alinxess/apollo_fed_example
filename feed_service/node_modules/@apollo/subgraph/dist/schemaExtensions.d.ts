import { DirectiveNode, FieldDefinitionNode, FieldNode, GraphQLResolveInfo, InlineFragmentNode } from 'graphql';
export declare type GraphQLReferenceResolver<TContext> = (reference: object, context: TContext, info: GraphQLResolveInfo) => any;
declare module 'graphql/type/definition' {
    interface GraphQLObjectType {
        resolveReference?: GraphQLReferenceResolver<any>;
    }
    interface GraphQLObjectTypeConfig<TSource, TContext> {
        resolveReference?: GraphQLReferenceResolver<TContext>;
    }
}
export declare type ServiceName = string | null;
export declare type DefaultRootOperationTypeName = 'Query' | 'Mutation' | 'Subscription';
export interface ExternalFieldDefinition {
    field: FieldDefinitionNode;
    parentTypeName: string;
    serviceName: string;
}
export interface ServiceNameToKeyDirectivesMap {
    [serviceName: string]: FieldSet[] | undefined;
}
export declare type DirectiveUsages = Map<string, DirectiveNode[]>;
export interface FederationType {
    serviceName?: ServiceName;
    keys?: ServiceNameToKeyDirectivesMap;
    externals?: {
        [serviceName: string]: ExternalFieldDefinition[];
    };
    isValueType?: boolean;
    directiveUsages?: DirectiveUsages;
}
export declare type FieldSet = readonly (FieldNode | InlineFragmentNode)[];
export interface FederationField {
    serviceName?: ServiceName;
    requires?: FieldSet;
    provides?: FieldSet;
    belongsToValueType?: boolean;
    directiveUsages?: DirectiveUsages;
}
//# sourceMappingURL=schemaExtensions.d.ts.map