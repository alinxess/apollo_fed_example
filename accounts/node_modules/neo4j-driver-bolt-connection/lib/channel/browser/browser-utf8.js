"use strict";
/**
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var browser_buf_1 = __importDefault(require("./browser-buf"));
var text_encoding_utf_8_1 = require("text-encoding-utf-8");
var encoder = new text_encoding_utf_8_1.TextEncoder('utf-8');
var decoder = new text_encoding_utf_8_1.TextDecoder('utf-8');
function encode(str) {
    return new browser_buf_1.default(encoder.encode(str).buffer);
}
function decode(buffer, length) {
    if (buffer instanceof browser_buf_1.default) {
        return decoder.decode(buffer.readView(Math.min(length, buffer.length - buffer.position)));
    }
    else {
        // Copy the given buffer into a regular buffer and decode that
        var tmpBuf = new browser_buf_1.default(length);
        for (var i = 0; i < length; i++) {
            tmpBuf.writeUInt8(buffer.readUInt8());
        }
        tmpBuf.reset();
        return decoder.decode(tmpBuf.readView(length));
    }
}
exports.default = {
    encode: encode,
    decode: decode
};
