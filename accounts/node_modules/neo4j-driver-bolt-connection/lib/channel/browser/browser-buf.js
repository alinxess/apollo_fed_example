"use strict";
/**
 * Copyright (c) "Neo4j"
 * Neo4j Sweden AB [http://neo4j.com]
 *
 * This file is part of Neo4j.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var buf_1 = __importDefault(require("../../buf"));
var HeapBuffer = /** @class */ (function (_super) {
    __extends(HeapBuffer, _super);
    function HeapBuffer(arg) {
        var _this = this;
        var buffer = arg instanceof ArrayBuffer ? arg : new ArrayBuffer(arg);
        _this = _super.call(this, buffer.byteLength) || this;
        _this._buffer = buffer;
        _this._view = new DataView(_this._buffer);
        return _this;
    }
    HeapBuffer.prototype.putUInt8 = function (position, val) {
        this._view.setUint8(position, val);
    };
    HeapBuffer.prototype.getUInt8 = function (position) {
        return this._view.getUint8(position);
    };
    HeapBuffer.prototype.putInt8 = function (position, val) {
        this._view.setInt8(position, val);
    };
    HeapBuffer.prototype.getInt8 = function (position) {
        return this._view.getInt8(position);
    };
    HeapBuffer.prototype.getFloat64 = function (position) {
        return this._view.getFloat64(position);
    };
    HeapBuffer.prototype.putFloat64 = function (position, val) {
        this._view.setFloat64(position, val);
    };
    HeapBuffer.prototype.getSlice = function (start, length) {
        if (this._buffer.slice) {
            return new HeapBuffer(this._buffer.slice(start, start + length));
        }
        else {
            // Some platforms (eg. phantomjs) don't support slice, so fall back to a copy
            // We do this rather than return a SliceBuffer, because sliceBuffer cannot
            // be passed to native network write ops etc - we need ArrayBuffer for that
            var copy = new HeapBuffer(length);
            for (var i = 0; i < length; i++) {
                copy.putUInt8(i, this.getUInt8(i + start));
            }
            return copy;
        }
    };
    /**
     * Specific to HeapBuffer, this gets a DataView from the
     * current position and of the specified length.
     */
    HeapBuffer.prototype.readView = function (length) {
        return new DataView(this._buffer, this._updatePos(length), length);
    };
    return HeapBuffer;
}(buf_1.default));
exports.default = HeapBuffer;
