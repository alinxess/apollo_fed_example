"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.err = exports.GraphQLErrorExt = void 0;
const graphql_1 = require("graphql");
class GraphQLErrorExt extends graphql_1.GraphQLError {
    constructor(code, message, props) {
        super(message, props === null || props === void 0 ? void 0 : props.nodes, props === null || props === void 0 ? void 0 : props.source, props === null || props === void 0 ? void 0 : props.positions, props === null || props === void 0 ? void 0 : props.path, props === null || props === void 0 ? void 0 : props.originalError, props === null || props === void 0 ? void 0 : props.extensions);
        this.code = code;
        if (props)
            for (const prop in props) {
                if (!GraphQLErrorExt.BASE_PROPS.has(prop)) {
                    this[prop] = props[prop];
                }
            }
    }
    get name() { return this.code; }
    throw() { throw this; }
    toString() {
        let output = `[${this.code}] ${graphql_1.printError(this)}`;
        const causes = this.causes;
        if (causes && causes.length) {
            output += '\ncaused by:';
            for (const cause of this.causes || []) {
                if (!cause)
                    continue;
                output += '\n\n  - ';
                output += cause.toString().split('\n').join('\n    ');
            }
        }
        return output;
    }
}
exports.GraphQLErrorExt = GraphQLErrorExt;
GraphQLErrorExt.BASE_PROPS = new Set('nodes source positions path originalError extensions'.split(' '));
function err(code, props) {
    const message = typeof props === 'string' ? props : props.message;
    const error = new GraphQLErrorExt(code, message, typeof props === 'string' ? undefined : props);
    return error;
}
exports.err = err;
exports.default = err;
//# sourceMappingURL=error.js.map