"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.names = exports.features = exports.schema = exports.CoreSchema = exports.ErrOverlappingNames = exports.ErrBadFeature = exports.ErrNoCore = exports.ErrNoSchema = exports.ErrExtraSchema = void 0;
const graphql_1 = require("graphql");
const values_1 = require("graphql/execution/values");
const core_1 = __importDefault(require("./core"));
const error_1 = require("./error");
const feature_url_1 = __importDefault(require("./feature-url"));
const features_1 = __importStar(require("./features"));
const is_1 = require("./is");
const names_1 = require("./names");
const ErrExtraSchema = (def) => error_1.err('ExtraSchema', {
    message: 'extra schema definition ignored',
    schemaDefinition: def,
    nodes: [def]
});
exports.ErrExtraSchema = ErrExtraSchema;
const ErrNoSchema = () => error_1.err('NoSchema', 'no schema definitions found');
exports.ErrNoSchema = ErrNoSchema;
const ErrNoCore = (causes) => error_1.err('NoCore', {
    message: 'no core feature found',
    causes
});
exports.ErrNoCore = ErrNoCore;
const ErrBadFeature = (node, ...causes) => error_1.err('BadFeature', {
    message: 'bad core feature request',
    directive: node,
    nodes: [node],
    causes
});
exports.ErrBadFeature = ErrBadFeature;
const ErrOverlappingNames = (name, features) => error_1.err('OverlappingNames', {
    message: `the name "${name}" is defined by multiple features`,
    name,
    features,
    nodes: features.map(f => f.directive)
});
exports.ErrOverlappingNames = ErrOverlappingNames;
class CoreSchema extends core_1.default {
    static graphql(parts, ...replacements) {
        return CoreSchema.fromSource(new graphql_1.Source(String.raw.call(null, parts, ...replacements), '(inline graphql)'));
    }
    static fromSource(source) {
        return new CoreSchema(graphql_1.parse(source));
    }
    check(...fns) {
        if (!fns.length)
            fns = [features, names];
        return super.check(...fns);
    }
    get document() { return this.data; }
    get schema() { return this.get(schema); }
    get features() { return this.get(features); }
    get names() { return this.get(names); }
    *read(directive, node) {
        var _a;
        const url = directive instanceof feature_url_1.default ? directive
            : typeof directive === 'string' ? feature_url_1.default.parse(directive)
                : feature_url_1.default.parse((_a = directive.extensions) === null || _a === void 0 ? void 0 : _a.specifiedBy);
        const name = this.features.documentName(url);
        const feature = this.features.find(url);
        const match = url.isDirective
            ? (dir) => dir.name.value === name
            : (dir) => this.featureFor(dir) === feature;
        if (!is_1.hasDirectives(node))
            return;
        if (!feature)
            return;
        for (const d of node.directives) {
            if (match(d)) {
                const data = directive instanceof graphql_1.GraphQLDirective
                    ? values_1.getArgumentValues(directive, d)
                    : undefined;
                const item = {
                    node,
                    directive: d,
                    feature,
                    canonicalName: '@' + (feature === null || feature === void 0 ? void 0 : feature.canonicalName(d.name.value)),
                };
                if (data != null)
                    item.data = data;
                yield item;
            }
        }
    }
    featureFor(node) {
        if (!is_1.hasName(node))
            return;
        const [prefix] = names_1.getPrefix(node.name.value);
        if (prefix || is_1.isAst(node, 'Directive', 'DirectiveDefinition')) {
            return this.names.get(prefix !== null && prefix !== void 0 ? prefix : node.name.value);
        }
        return;
    }
}
exports.CoreSchema = CoreSchema;
exports.default = CoreSchema;
function schema() {
    let schema = null;
    for (const def of this.document.definitions) {
        if (def.kind === 'SchemaDefinition') {
            if (!schema)
                schema = def;
            else
                this.report(exports.ErrExtraSchema(def));
        }
    }
    if (!schema) {
        throw exports.ErrNoSchema();
    }
    return schema;
}
exports.schema = schema;
function features() {
    var _a, _b, _c, _d;
    const schema = this.schema;
    this.pure(...(_a = schema.directives) !== null && _a !== void 0 ? _a : []);
    const noCoreErrors = [];
    let coreFeature = null;
    const features = new features_1.default;
    for (const d of schema.directives || []) {
        if (!coreFeature)
            try {
                const candidate = values_1.getArgumentValues($core, d);
                if (CORE_VERSIONS.has(candidate.feature) &&
                    d.name.value === ((_b = candidate.as) !== null && _b !== void 0 ? _b : 'core')) {
                    const url = feature_url_1.default.parse(candidate.feature);
                    coreFeature = new features_1.Feature(url, (_c = candidate.as) !== null && _c !== void 0 ? _c : url.name, d);
                }
            }
            catch (err) {
                noCoreErrors.push(err);
            }
        if (coreFeature && d.name.value === coreFeature.name)
            try {
                const values = values_1.getArgumentValues($core, d);
                const url = feature_url_1.default.parse(values.feature);
                features.add(new features_1.Feature(url, (_d = values.as) !== null && _d !== void 0 ? _d : url.name, d, values.for));
            }
            catch (err) {
                this.report(exports.ErrBadFeature(d, err));
            }
    }
    if (!coreFeature)
        throw exports.ErrNoCore(noCoreErrors);
    this.report(...features.validate());
    return features;
}
exports.features = features;
function names() {
    var _a;
    const { features } = this;
    this.pure(features);
    const names = new Map;
    for (const feature of features) {
        if (!names.has(feature.name))
            names.set(feature.name, []);
        (_a = names.get(feature.name)) === null || _a === void 0 ? void 0 : _a.push(feature);
    }
    const output = new Map;
    for (const [name, features] of names) {
        if (features.length > 1) {
            this.report(exports.ErrOverlappingNames(name, features));
            continue;
        }
        output.set(name, features[0]);
    }
    return output;
}
exports.names = names;
const CORE_VERSIONS = new Set([
    'https://specs.apollo.dev/core/v0.1',
    'https://specs.apollo.dev/core/v0.2',
]);
const Purpose = new graphql_1.GraphQLEnumType({
    name: 'core__Purpose',
    values: {
        SECURITY: {},
        EXECUTION: {},
    },
});
const $core = new graphql_1.GraphQLDirective({
    name: '@core',
    args: {
        feature: { type: graphql_1.GraphQLNonNull(graphql_1.GraphQLString), },
        as: { type: graphql_1.GraphQLString },
        'for': { type: Purpose }
    },
    locations: ['SCHEMA'],
    isRepeatable: true,
});
//# sourceMappingURL=schema.js.map