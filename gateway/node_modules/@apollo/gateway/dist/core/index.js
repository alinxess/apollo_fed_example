"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.featureSupport = exports.ErrForUnsupported = exports.ErrUnsupportedFeature = void 0;
const core_schema_1 = require("@apollo/core-schema");
const SUPPORTED_FEATURES = new Set([
    'https://specs.apollo.dev/core/v0.1',
    'https://specs.apollo.dev/core/v0.2',
    'https://specs.apollo.dev/join/v0.1',
    'https://specs.apollo.dev/tag/v0.1',
    'https://specs.apollo.dev/inaccessible/v0.1',
]);
const ErrUnsupportedFeature = (feature) => (0, core_schema_1.err)('UnsupportedFeature', {
    message: `feature ${feature.url} is for: ${feature.purpose} but is unsupported`,
    feature,
    nodes: [feature.directive],
});
exports.ErrUnsupportedFeature = ErrUnsupportedFeature;
const ErrForUnsupported = (core, ...features) => (0, core_schema_1.err)('ForUnsupported', {
    message: `the \`for:\` argument is unsupported by version ${core.url.version} ` +
        `of the core spec. Please upgrade to at least @core v0.2 (https://specs.apollo.dev/core/v0.2).`,
    features,
    nodes: [core.directive, ...features.map(f => f.directive)]
});
exports.ErrForUnsupported = ErrForUnsupported;
function featureSupport() {
    const coreVersionZeroDotOne = this.features.find('https://specs.apollo.dev/core/v0.1', true);
    if (coreVersionZeroDotOne) {
        const purposefulFeatures = [...this.features].filter(f => f.purpose);
        if (purposefulFeatures.length > 0)
            this.report((0, exports.ErrForUnsupported)(coreVersionZeroDotOne, ...purposefulFeatures));
    }
    for (const feature of this.features) {
        if (!feature.purpose)
            continue;
        if (feature.purpose === 'EXECUTION' || feature.purpose === 'SECURITY') {
            if (!SUPPORTED_FEATURES.has(feature.url.base.toString())) {
                this.report((0, exports.ErrUnsupportedFeature)(feature));
            }
        }
    }
}
exports.featureSupport = featureSupport;
//# sourceMappingURL=index.js.map